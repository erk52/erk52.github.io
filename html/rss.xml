<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
  <channel>
    <title>Code Blarg</title>
    <link>https://example.org/blog/</link>
    <description>Simple coding projects</description>
    <language>en-us</language>


    <item>
      <link>https://example.org/blog/2025/01/08/brainfuck-part-1.html</link>
      <guid>https://example.org/blog/2025/01/08/brainfuck-part-1.html</guid>
      <title><![CDATA[Brainfuck Part 1]]></title>
      <description><![CDATA[<h1>Brainfuck Part 1</h1>

<p>Brainfuck is probably well-known enough that I don't need to give you a lengthy explanation. Just check the <a href="https://en.wikipedia.org/wiki/Brainfuck">wikipedia entry</a> to read up on this 'minimalist, esoteric programming language'. Today, I decided to build a brainfuck interpreter and write about it. Why? Because interpreters are cool, and brainfuck is so simple that we can build one rather quickly and then play around with some optimizations or even expand to a compiler. I'm working in Swift because I've recently found it to be a surprisingly pleasant language to work with.</p>

<p>So let's get started on a naive implementation. We'll want to define a data pointer, an instruction pointer, and allocate a block of memory and an empty array to hold our output.</p>
<div class="highlight"><pre><span/><span class="kd">var</span> <span class="nv">instructionPointer</span> <span class="p">=</span> <span class="mi">0</span>
<span class="kd">var</span> <span class="nv">dataPointer</span> <span class="p">=</span> <span class="mi">0</span>
<span class="kd">let</span> <span class="nv">MAX_MEM</span> <span class="p">=</span> <span class="mi">30_000</span>

<span class="kd">var</span> <span class="nv">memory</span><span class="p">:</span> <span class="p">[</span><span class="nb">Int</span><span class="p">]</span> <span class="p">=</span> <span class="nb">Array</span><span class="p">(</span><span class="n">repeating</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="bp">count</span><span class="p">:</span> <span class="n">MAX_MEM</span><span class="p">)</span>

<span class="kd">var</span> <span class="nv">output</span><span class="p">:</span> <span class="p">[</span><span class="nb">Int</span><span class="p">]</span> <span class="p">=</span> <span class="p">[]</span>
</pre></div>

<p>We also need a way to read in a program. This gives me an excuse to figure out how to take command line arguments in Swift. And because Swift is a lovely language, it turns out to be pretty simple: <code>CommandLine.arguments</code>.</p>
<div class="highlight"><pre><span/><span class="c1">// Default to hello world test program</span>
<span class="kd">var</span> <span class="nv">program_string</span> <span class="p">=</span> <span class="s">"++++++++[&gt;++++[&gt;++&gt;+++&gt;+++&gt;+&lt;&lt;&lt;&lt;-]&gt;+&gt;+&gt;-&gt;&gt;+[&lt;]&lt;-]&gt;&gt;.&gt;---.+++++++..+++.&gt;&gt;.&lt;-.&lt;.+++.------.--------.&gt;&gt;+.&gt;++."</span>

<span class="k">if</span> <span class="n">CommandLine</span><span class="p">.</span><span class="n">arguments</span><span class="p">.</span><span class="bp">count</span> <span class="p">==</span> <span class="mi">2</span> <span class="p">{</span>
    <span class="kd">let</span> <span class="nv">filename</span> <span class="p">=</span> <span class="n">CommandLine</span><span class="p">.</span><span class="n">arguments</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
    <span class="n">program_string</span> <span class="p">=</span> <span class="k">try</span><span class="p">!</span> <span class="nb">String</span><span class="p">(</span><span class="n">contentsOfFile</span><span class="p">:</span> <span class="n">filename</span><span class="p">)</span>
<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="bp">print</span><span class="p">(</span><span class="s">"Please provide a single command line argument (path to bf file)"</span><span class="p">)</span>
<span class="p">}</span>
<span class="kd">let</span> <span class="nv">program</span> <span class="p">=</span> <span class="nb">Array</span><span class="p">(</span><span class="n">program_string</span><span class="p">)</span>
</pre></div>

<p>If we provide a path to a file as a command line argument, we read that as our program. As a fallback and useful test case, we default to a hello world program. We check for the second element of CommandLine.arguments because the first element is just the path to our executable. Now to actually interpret our program:</p>
<div class="highlight"><pre><span/><span class="k">while</span> <span class="n">instructionPointer</span> <span class="o">&lt;</span> <span class="n">program</span><span class="p">.</span><span class="bp">count</span> <span class="p">{</span>
    <span class="k">switch</span> <span class="n">program</span><span class="p">[</span><span class="n">instructionPointer</span><span class="p">]</span> <span class="p">{</span>
    <span class="k">case</span> <span class="s">"+"</span><span class="p">:</span> <span class="n">memory</span><span class="p">[</span><span class="n">dataPointer</span><span class="p">]</span> <span class="o">+=</span> <span class="mi">1</span>
    <span class="k">case</span> <span class="s">"-"</span><span class="p">:</span> <span class="n">memory</span><span class="p">[</span><span class="n">dataPointer</span><span class="p">]</span> <span class="o">-=</span> <span class="mi">1</span>
    <span class="k">case</span> <span class="s">"&gt;"</span><span class="p">:</span> <span class="n">dataPointer</span> <span class="o">+=</span> <span class="mi">1</span>
    <span class="k">case</span> <span class="s">"&lt;"</span><span class="p">:</span> <span class="n">dataPointer</span> <span class="o">-=</span> <span class="mi">1</span>
    <span class="k">case</span> <span class="s">"["</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">memory</span><span class="p">[</span><span class="n">dataPointer</span><span class="p">]</span> <span class="p">==</span> <span class="mi">0</span> <span class="p">{</span>
            <span class="kd">var</span> <span class="nv">open</span> <span class="p">=</span> <span class="mi">1</span>
            <span class="k">while</span> <span class="n">open</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="p">{</span>
                <span class="n">instructionPointer</span> <span class="o">+=</span> <span class="mi">1</span>
                <span class="k">if</span> <span class="n">program</span><span class="p">[</span><span class="n">instructionPointer</span><span class="p">]</span> <span class="p">==</span> <span class="s">"["</span> <span class="p">{</span> <span class="n">open</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">}</span>
                <span class="k">if</span> <span class="n">program</span><span class="p">[</span><span class="n">instructionPointer</span><span class="p">]</span> <span class="p">==</span> <span class="s">"]"</span> <span class="p">{</span> <span class="n">open</span> <span class="o">-=</span> <span class="mi">1</span><span class="p">}</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="k">case</span> <span class="s">"]"</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">memory</span><span class="p">[</span><span class="n">dataPointer</span><span class="p">]</span> <span class="o">!=</span> <span class="mi">0</span> <span class="p">{</span>
            <span class="kd">var</span> <span class="nv">open</span> <span class="p">=</span> <span class="mi">1</span>
            <span class="k">while</span> <span class="n">open</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="p">{</span>
                <span class="n">instructionPointer</span> <span class="o">-=</span> <span class="mi">1</span>
                <span class="k">if</span> <span class="n">program</span><span class="p">[</span><span class="n">instructionPointer</span><span class="p">]</span> <span class="p">==</span> <span class="s">"["</span> <span class="p">{</span> <span class="n">open</span> <span class="o">-=</span> <span class="mi">1</span><span class="p">}</span>
                <span class="k">if</span> <span class="n">program</span><span class="p">[</span><span class="n">instructionPointer</span><span class="p">]</span> <span class="p">==</span> <span class="s">"]"</span> <span class="p">{</span> <span class="n">open</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">}</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="k">case</span> <span class="s">"."</span><span class="p">:</span>
        <span class="n">output</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">memory</span><span class="p">[</span><span class="n">dataPointer</span><span class="p">])</span>
    <span class="k">case</span> <span class="s">","</span><span class="p">:</span>
        <span class="n">memory</span><span class="p">[</span><span class="n">dataPointer</span><span class="p">]</span> <span class="p">=</span> <span class="nb">Int</span><span class="p">(</span><span class="n">getchar</span><span class="p">())</span>
    <span class="k">default</span><span class="p">:</span>
        <span class="k">break</span>
    <span class="p">}</span>
    <span class="k">if</span> <span class="n">dataPointer</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="p">{</span> <span class="n">dataPointer</span> <span class="p">=</span> <span class="n">MAX_MEM</span> <span class="o">-</span> <span class="mi">1</span><span class="p">}</span>
    <span class="k">if</span> <span class="n">dataPointer</span> <span class="p">==</span> <span class="n">MAX_MEM</span> <span class="p">{</span> <span class="n">dataPointer</span> <span class="p">=</span> <span class="mi">0</span> <span class="p">}</span>
    <span class="n">instructionPointer</span> <span class="o">+=</span> <span class="mi">1</span>
<span class="p">}</span>
</pre></div>

<p>This is just a naive implementation of the spec. For +/-, we increment the current memory cell. For &gt;/&lt;, we move the data pointer. '[' is a 'jump if zero' instruction and '[' is a jump if not zero. In either case, we just iterate forward or backward through the program until we find the matching bracket. For <q>.</q>, we add to our output buffer, and for <q>,</q>, we wait for user input. I've also included logic for the data pointer to wrap around if it runs out of bounds. I'm not sure if that's intended, or if going out of bounds should throw an error.</p>

<p>And that's it, really. We are now interpreting some brainfuck. Let's add some pretty output. If everything can be converted to ASCII, we output a string. Otherwise, just show raw numbers:</p>
<div class="highlight"><pre><span/><span class="k">do</span> <span class="p">{</span>
    <span class="kd">let</span> <span class="nv">scalars</span> <span class="p">=</span> <span class="k">try</span> <span class="n">output</span><span class="p">.</span><span class="bp">map</span> <span class="p">{</span><span class="nb">UnicodeScalar</span><span class="p">(</span><span class="nv">$0</span><span class="p">)</span><span class="o">!</span><span class="p">}</span>
    <span class="bp">print</span><span class="p">(</span><span class="n">scalars</span><span class="p">.</span><span class="bp">map</span><span class="p">{</span><span class="nb">String</span><span class="p">(</span><span class="nv">$0</span><span class="p">)}.</span><span class="n">joined</span><span class="p">())</span>
<span class="p">}</span> <span class="k">catch</span> <span class="p">{</span>
    <span class="bp">print</span><span class="p">(</span><span class="n">output</span><span class="p">)</span>
<span class="p">}</span>
</pre></div>

<p><code>UnicodeScalar</code> takes an integer and returns an Optional(Character), so we unwrap it, cast to a string, then join an array of strings. Swift does have some nice functional aspects that let you do fun things with map/filter/reduce.</p>

<p>So now we have an interpreter. It's slow and inefficient, though. There are two obvious ways to improve things. Instead of iterating through a program like '++++++', we can condense this into something like '+6'. So basically do some run length encoding to compress the program. Second, instead of iterating over the whole program to match '[' and ']', we should do that once when we read the program and then save a mapping of opening and closing brackets. </p>

<p>So next time, we'll add these optimizations and build a proper lexer/tokenizer.</p>

<p>Code for this iteration can be found on my <a href="https://github.com/erk52/Brainf-ckery/blob/main/Brainfuckerv1.swift">github</a>.</p>
]]></description>
      <pubDate>Wed, 08 Jan 2025 00:00:00 -0500</pubDate>
    </item>

  </channel>
</rss>
